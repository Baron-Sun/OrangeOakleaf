{"ast":null,"code":"/**\r\n * ajax工具类\r\n * 也可用 axios(https://github.com/axios/axios)\r\n */var joinQuery=function joinQuery(params){var Querys=Object.keys(params).map(function(key){return\"\".concat(key,\"=\").concat(params[key]);}).join('&');return\"?\".concat(Querys);};//原生ajx\nvar ajax=function ajax(request){var r=new XMLHttpRequest();r.open(request.method,request.url,true);if(request.contentType!==undefined){r.setRequestHeader('Content-Type',request.contentType);}r.onreadystatechange=function(event){if(r.readyState===4){if(r.status==200){var data=JSON.parse(r.response);request.success(data);}if(r.status==500){request.error();}}};if(request.method==='GET'){r.send();}else{r.send(request.data);}};//用Promise封装原生ajx\nvar ajaxPromise=function ajaxPromise(url,method,form){var p=new Promise(function(resolve,reject){var request={url:url,method:method,contentType:'application/json',success:function success(r){resolve(r);},error:function error(e){var r={success:false,message:'网络错误, 请重新尝试'};resolve(r);//reject(r)\n}};if(method==='post'){var data=JSON.stringify(form);request.data=data;}ajax(request);});return p;};//封装 ajaxPromise\nvar _ajax={get:function get(path){var params=arguments.length>1&&arguments[1]!==undefined?arguments[1]:{};var url=path+joinQuery(params);var method='get';var form={};return ajaxPromise(url,method,form);},post:function post(path){var params=arguments.length>1&&arguments[1]!==undefined?arguments[1]:{};var url=path;var method='post';return ajaxPromise(url,method,params);}};module.exports=_ajax;","map":{"version":3,"sources":["D:/Repos/Projects/test-ebook-2/OrangeOakleaf/src/utils/request.js"],"names":["joinQuery","params","Querys","Object","keys","map","key","join","ajax","request","r","XMLHttpRequest","open","method","url","contentType","undefined","setRequestHeader","onreadystatechange","event","readyState","status","data","JSON","parse","response","success","error","send","ajaxPromise","form","p","Promise","resolve","reject","e","message","stringify","_ajax","get","path","post","module","exports"],"mappings":"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","sourcesContent":["/**\r\n * ajax工具类\r\n * 也可用 axios(https://github.com/axios/axios)\r\n */\r\n\r\nconst joinQuery = function (params) {\r\n\r\n    var Querys = Object.keys(params).map(key => {\r\n        return `${key}=${params[key]}`\r\n    }).join('&')\r\n\r\n    return `?${Querys}`\r\n}\r\n\r\n//原生ajx\r\nconst ajax = function (request) {\r\n\r\n    var r = new XMLHttpRequest()\r\n    r.open(request.method, request.url, true)\r\n    if (request.contentType !== undefined) {\r\n        r.setRequestHeader('Content-Type', request.contentType)\r\n    }\r\n    r.onreadystatechange = function (event) {\r\n        if (r.readyState === 4) {\r\n            if (r.status == 200) {\r\n                const data = JSON.parse(r.response)\r\n                request.success(data)\r\n            }\r\n            if (r.status == 500) {\r\n                request.error()\r\n            }\r\n        }\r\n    }\r\n    if (request.method === 'GET') {\r\n        r.send()\r\n    } else {\r\n        r.send(request.data)\r\n    }\r\n}\r\n\r\n//用Promise封装原生ajx\r\nconst ajaxPromise = function (url, method, form) {\r\n    var p = new Promise((resolve, reject) => {\r\n        const request = {\r\n            url: url,\r\n            method: method,\r\n            contentType: 'application/json',\r\n            success: function (r) {\r\n                resolve(r)\r\n            },\r\n            error: function (e) {\r\n                const r = {\r\n                    success: false,\r\n                    message: '网络错误, 请重新尝试',\r\n                }\r\n                resolve(r)\r\n                //reject(r)\r\n            },\r\n        }\r\n        if (method === 'post') {\r\n            const data = JSON.stringify(form)\r\n            request.data = data\r\n        }\r\n        ajax(request)\r\n    })\r\n    return p\r\n}\r\n\r\n//封装 ajaxPromise\r\nconst _ajax = {\r\n    get: (path, params = {}) => {\r\n        const url = path + joinQuery(params)\r\n        const method = 'get'\r\n        const form = {}\r\n        return ajaxPromise(url, method, form)\r\n    },\r\n    post: (path, params = {}) => {\r\n        const url = path\r\n        const method = 'post'\r\n        return ajaxPromise(url, method, params)\r\n    },\r\n}\r\n\r\nmodule.exports = _ajax"]},"metadata":{},"sourceType":"module"}